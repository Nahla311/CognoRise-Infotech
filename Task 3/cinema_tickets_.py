# -*- coding: utf-8 -*-
"""Cinema Tickets .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KszIIpJ3vl9_8vu0c8GvxyY3ITJbBuuX
"""

import numpy as np
import pandas as pd

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
import sklearn.metrics as metrics

data = pd.read_csv("/content/cinemaTicket_Ref.csv")

data.head()

data.tail()

data.drop('date', axis=1, inplace=True)

data.info()

data.describe()

data[data.isnull().any(axis=1)]

data['capacity'] = data['capacity'].fillna(0)
data['occu_perc'] = data['occu_perc'].fillna(0)

print(data.nunique())

sns.lineplot(x=data['month'],y=data['total_sales'])

plt.title("Sales of Ticket Movie")
plt.xlabel("Month")
plt.ylabel("Total of Sale")

plt.show()

plt.figure(figsize =(44,14))
sns.barplot(x=data['film_code'],y=data['total_sales'])

plt.show()

sns.lineplot(data=data, x="quarter", y="tickets_sold",color="b")

plt.title("Tickets Sold by Quarter")
plt.xlabel("Years")
plt.ylabel("Passengers")
plt.show()

sns.catplot(x="quarter", y="total_sales", data=data,jitter=False)

plt.title("Total Sales by Quarter")

plt.show()

sns.boxplot( x=data["quarter"], y=data["tickets_sold"],width=0.5)

plt.title("Boxplot of Ticket Sold")
plt.ylabel("Ticket Sold")
plt.xlabel("Quarter")

plt.show()

sns.barplot(x=data['quarter'],y=data['total_sales'])
sns.lineplot(x=data['quarter'],y=data['total_sales'])

plt.title("Total Sales")
plt.xlabel("Quarter")
plt.ylabel("Total Sales")
plt.show()

sns.pairplot(data=data, vars=["tickets_sold", "ticket_price"])

plt.show()

sns.boxplot(data['tickets_sold'])

plt.title("Boxplot of Notes")

plt.show()

plt.style.use('fivethirtyeight')
data.groupby('cinema_code')['total_sales'].sum().plot(figsize=(22, 4), color='grey')

plt.style.use('fivethirtyeight')
cg = data.groupby('cinema_code', as_index=False)['total_sales'].sum()
cg = cg[cg.total_sales > 9.000000e+09]
plt.figure(figsize=(24, 5))
sns.barplot(data=cg, x='cinema_code', y='total_sales', palette='gray')

plt.style.use('fivethirtyeight')
data.groupby('film_code')['total_sales'].sum().plot(figsize=(18, 4), color='grey')

plt.style.use('fivethirtyeight')
fg = data.groupby('film_code', as_index=False)['total_sales'].sum()
fg = fg[fg.total_sales > 9.000000e+09]
plt.figure(figsize=(22, 6))
sns.barplot(data=fg, x='film_code', y='total_sales', palette='gray')

"""# Train Test Split"""

X = data.iloc[:,:-1]
X

Y = data.iloc[:,-1]
Y

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,random_state = 1,test_size = 0.3)

"""# KNeighborsClassifier"""

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train,Y_train)
Y_pred = knn.predict(X_train)
Y_pred

from sklearn.metrics import balanced_accuracy_score
balanced_accuracy_score(Y_train, Y_pred)

"""#Linear Regression"""

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

# model training
model.fit(X_train, Y_train)

# print metric to get performance
print("Accuracy: ",model.score(X_train, Y_train) * 100)

"""# Decision Tree"""

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()

model.fit(X_train, Y_train)

# print metric to get performance
print("Accuracy: ",model.score(X_train, Y_train) * 100)

from sklearn.ensemble import GradientBoostingClassifier  # For classification
from sklearn.metrics import accuracy_score


# For classification:
# Define and train the Gradient Boosting Classifier
classifier = GradientBoostingClassifier(n_estimators=40, learning_rate=0.1, max_depth=3, random_state=42)
classifier.fit(X_train, Y_train)

# Make predictions on the test set
predictions = classifier.predict(X_test)

# Evaluate the accuracy of the classifier
accuracy = accuracy_score(Y_test, predictions)
print(f"Accuracy: {accuracy}")